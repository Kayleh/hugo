<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>io on Kayleh</title>
    <link>https://kayleh.top/tags/io/</link>
    <description>Recent content in io on Kayleh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Dec 2020 22:45:19 +0800</lastBuildDate><atom:link href="https://kayleh.top/tags/io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Talk about:IO</title>
      <link>https://kayleh.top/%E6%B5%85%E8%B0%88io/</link>
      <pubDate>Sun, 20 Dec 2020 22:45:19 +0800</pubDate>
      
      <guid>https://kayleh.top/%E6%B5%85%E8%B0%88io/</guid>
      <description>File对象 在计算机系统中，文件是非常重要的存储方式。Java的标准库java.io提供了File对象来操作文件和目录。
要构造一个File对象，需要传入文件路径：
public class Main { public static void main(String[] args) { File f = new File(&amp;#34;C:\\Windows\\notepad.exe&amp;#34;); System.out.println(f); } } 构造File对象时，既可以传入绝对路径，也可以传入相对路径。绝对路径是以根目录开头的完整路径，例如：
File f = new File(&amp;#34;C:\\Windows\\notepad.exe&amp;#34;); 注意Windows平台使用\作为路径分隔符，在Java字符串中需要用\\表示一个\。Linux平台使用/作为路径分隔符：
File f = new File(&amp;#34;/usr/bin/javac&amp;#34;); 传入相对路径时，相对路径前面加上当前目录就是绝对路径：
// 假设当前目录是C:\Docs File f1 = new File(&amp;#34;sub\\javac&amp;#34;); // 绝对路径是C:\Docs\sub\javac File f3 = new File(&amp;#34;.\\sub\\javac&amp;#34;); // 绝对路径是C:\Docs\sub\javac File f3 = new File(&amp;#34;..\\sub\\javac&amp;#34;); // 绝对路径是C:\sub\javac 可以用.表示当前目录，..表示上级目录。
File对象有3种形式表示的路径，一种是getPath()，返回构造方法传入的路径，一种是getAbsolutePath()，返回绝对路径，一种是getCanonicalPath，它和绝对路径类似，但是返回的是规范路径。
什么是规范路径？我们看以下代码：
public class Main { public static void main(String[] args) throws IOException { File f = new File(&amp;#34;.</description>
    </item>
    
  </channel>
</rss>
