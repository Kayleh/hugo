<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DesignPatterns on Kayleh</title>
    <link>https://kayleh.top/tags/designpatterns/</link>
    <description>Recent content in DesignPatterns on Kayleh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Jun 2020 17:22:53 +0800</lastBuildDate><atom:link href="https://kayleh.top/tags/designpatterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>模板方法</title>
      <link>https://kayleh.top/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 13 Jun 2020 17:22:53 +0800</pubDate>
      
      <guid>https://kayleh.top/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;h4 id=&#34;模板方法&#34;&gt;模板方法&lt;/h4&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>访问者模式</title>
      <link>https://kayleh.top/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 13 Jun 2020 17:22:33 +0800</pubDate>
      
      <guid>https://kayleh.top/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h4 id=&#34;访问者&#34;&gt;访问者&lt;/h4&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>策略模式</title>
      <link>https://kayleh.top/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 13 Jun 2020 17:17:47 +0800</pubDate>
      
      <guid>https://kayleh.top/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h4 id=&#34;策略&#34;&gt;策略&lt;/h4&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>状态模式</title>
      <link>https://kayleh.top/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 13 Jun 2020 16:14:10 +0800</pubDate>
      
      <guid>https://kayleh.top/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h4 id=&#34;状态&#34;&gt;状态&lt;/h4&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>观察者模式</title>
      <link>https://kayleh.top/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 13 Jun 2020 16:07:09 +0800</pubDate>
      
      <guid>https://kayleh.top/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h4 id=&#34;观察者&#34;&gt;观察者&lt;/h4&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>memo-mode</title>
      <link>https://kayleh.top/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 13 Jun 2020 15:20:47 +0800</pubDate>
      
      <guid>https://kayleh.top/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h4 id=&#34;备忘录模式&#34;&gt;备忘录模式&lt;/h4&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>中介者模式</title>
      <link>https://kayleh.top/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 13 Jun 2020 14:46:55 +0800</pubDate>
      
      <guid>https://kayleh.top/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h1 id=&#34;中介者模式&#34;&gt;中介者模式&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。中介者模式属于行为型模式。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>迭代器模式</title>
      <link>https://kayleh.top/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 13 Jun 2020 13:26:48 +0800</pubDate>
      
      <guid>https://kayleh.top/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h3 id=&#34;迭代器&#34;&gt;迭代器&lt;/h3&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>解释器模式</title>
      <link>https://kayleh.top/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 12 Jun 2020 21:31:18 +0800</pubDate>
      
      <guid>https://kayleh.top/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h1 id=&#34;解释器模式&#34;&gt;解释器模式&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>命令模式</title>
      <link>https://kayleh.top/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 12 Jun 2020 18:12:06 +0800</pubDate>
      
      <guid>https://kayleh.top/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;命令模式&#34;&gt;命令模式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;**命令模式（Command Pattern）**是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>责任链模式</title>
      <link>https://kayleh.top/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 11 Jun 2020 19:48:35 +0800</pubDate>
      
      <guid>https://kayleh.top/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h3 id=&#34;责任链模式&#34;&gt;责任链模式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;**责任链模式（Chain of Responsibility Pattern）**为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>代理模式</title>
      <link>https://kayleh.top/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 09 Jun 2020 20:46:15 +0800</pubDate>
      
      <guid>https://kayleh.top/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h3 id=&#34;代理模式&#34;&gt;代理模式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;为其他对象提供一种代理以控制对这个对象的访问。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>享元模式</title>
      <link>https://kayleh.top/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 09 Jun 2020 18:05:02 +0800</pubDate>
      
      <guid>https://kayleh.top/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h3 id=&#34;享元&#34;&gt;享元&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;运用共享技术有效地支持大量细粒度的对象。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>外观模式</title>
      <link>https://kayleh.top/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 09 Jun 2020 15:37:54 +0800</pubDate>
      
      <guid>https://kayleh.top/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h3 id=&#34;外观模式&#34;&gt;外观模式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;为子系统中的一组接口提供一个一致的界面。Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>装饰器模式</title>
      <link>https://kayleh.top/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 09 Jun 2020 15:10:41 +0800</pubDate>
      
      <guid>https://kayleh.top/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h3 id=&#34;装饰器模式&#34;&gt;装饰器模式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;动态地给一个对象添加一些额外的职责。就增加功能来说，相比生成子类更为灵活。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>组合模式</title>
      <link>https://kayleh.top/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 09 Jun 2020 14:39:48 +0800</pubDate>
      
      <guid>https://kayleh.top/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h3 id=&#34;组合模式&#34;&gt;组合模式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>桥接模式</title>
      <link>https://kayleh.top/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 09 Jun 2020 14:04:02 +0800</pubDate>
      
      <guid>https://kayleh.top/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h3 id=&#34;桥接模式&#34;&gt;桥接模式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;将抽象部分与它的实现部分分离，使它们都可以独立地变化。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>适配器模式</title>
      <link>https://kayleh.top/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 08 Jun 2020 14:28:13 +0800</pubDate>
      
      <guid>https://kayleh.top/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h3 id=&#34;适配器模式&#34;&gt;适配器模式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>原型</title>
      <link>https://kayleh.top/%E5%8E%9F%E5%9E%8B/</link>
      <pubDate>Mon, 08 Jun 2020 09:43:14 +0800</pubDate>
      
      <guid>https://kayleh.top/%E5%8E%9F%E5%9E%8B/</guid>
      <description>&lt;h3 id=&#34;原型&#34;&gt;原型&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>生成器</title>
      <link>https://kayleh.top/%E7%94%9F%E6%88%90%E5%99%A8/</link>
      <pubDate>Mon, 08 Jun 2020 09:39:43 +0800</pubDate>
      
      <guid>https://kayleh.top/%E7%94%9F%E6%88%90%E5%99%A8/</guid>
      <description>&lt;h3 id=&#34;生成器&#34;&gt;生成器&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>工厂设计模式</title>
      <link>https://kayleh.top/%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 06 Jun 2020 20:42:10 +0800</pubDate>
      
      <guid>https://kayleh.top/%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;工厂设计模式&#34;&gt;工厂设计模式&lt;/h2&gt;
&lt;h3 id=&#34;工厂方法&#34;&gt;工厂方法&lt;/h3&gt;
&lt;p&gt;工厂方法即Factory Method，是一种对象创建型模式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>https://kayleh.top/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 06 Jun 2020 14:05:04 +0800</pubDate>
      
      <guid>https://kayleh.top/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;单例设计模式&#34;&gt;单例设计模式&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>合成复用原则</title>
      <link>https://kayleh.top/%E5%90%88%E6%88%90%E5%A4%8D%E7%94%A8%E5%8E%9F%E5%88%99/</link>
      <pubDate>Fri, 05 Jun 2020 15:42:54 +0800</pubDate>
      
      <guid>https://kayleh.top/%E5%90%88%E6%88%90%E5%A4%8D%E7%94%A8%E5%8E%9F%E5%88%99/</guid>
      <description>&lt;h3 id=&#34;合成复用原则&#34;&gt;合成复用原则&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Composite Resue Principle&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>迪米特法则</title>
      <link>https://kayleh.top/%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/</link>
      <pubDate>Fri, 05 Jun 2020 11:09:31 +0800</pubDate>
      
      <guid>https://kayleh.top/%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/</guid>
      <description>&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Demeter Principle&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>开闭原则</title>
      <link>https://kayleh.top/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/</link>
      <pubDate>Fri, 05 Jun 2020 09:07:12 +0800</pubDate>
      
      <guid>https://kayleh.top/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/</guid>
      <description>&lt;h3 id=&#34;开闭原则&#34;&gt;开闭原则&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Open Closed Principle&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基本介绍&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>里氏替换原则</title>
      <link>https://kayleh.top/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/</link>
      <pubDate>Thu, 04 Jun 2020 18:13:11 +0800</pubDate>
      
      <guid>https://kayleh.top/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/</guid>
      <description>&lt;h3 id=&#34;里氏替换原则&#34;&gt;里氏替换原则&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Liskov Substitution Principle&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;里氏替换原则在1988年，由麻省理工学院的一位姓里的女士提出的。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>依赖倒转原则</title>
      <link>https://kayleh.top/%E4%BE%9D%E8%B5%96%E5%80%92%E8%BD%AC%E5%8E%9F%E5%88%99/</link>
      <pubDate>Wed, 03 Jun 2020 20:29:20 +0800</pubDate>
      
      <guid>https://kayleh.top/%E4%BE%9D%E8%B5%96%E5%80%92%E8%BD%AC%E5%8E%9F%E5%88%99/</guid>
      <description>&lt;h3 id=&#34;依赖倒转原则&#34;&gt;依赖倒转原则&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Dependence Inversion Priciple&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>接口隔离原则</title>
      <link>https://kayleh.top/%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/</link>
      <pubDate>Wed, 03 Jun 2020 17:56:04 +0800</pubDate>
      
      <guid>https://kayleh.top/%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/</guid>
      <description>&lt;h3 id=&#34;接口隔离原则&#34;&gt;接口隔离原则&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Interface Segregation Principle&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>单一职责原则</title>
      <link>https://kayleh.top/%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/</link>
      <pubDate>Wed, 03 Jun 2020 16:57:48 +0800</pubDate>
      
      <guid>https://kayleh.top/%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/</guid>
      <description>&lt;h3 id=&#34;单一职责原则&#34;&gt;单一职责原则&lt;/h3&gt;
&lt;hr&gt;</description>
    </item>
    
  </channel>
</rss>
