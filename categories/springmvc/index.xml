<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SpringMVC on Kayleh</title>
    <link>https://blog.kayleh.top/categories/springmvc/</link>
    <description>Recent content in SpringMVC on Kayleh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Apr 2020 21:04:07 +0800</lastBuildDate><atom:link href="https://blog.kayleh.top/categories/springmvc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringMVC@ModelAttribute的使用</title>
      <link>https://blog.kayleh.top/springmvc-modelattribute/</link>
      <pubDate>Sun, 19 Apr 2020 21:04:07 +0800</pubDate>
      
      <guid>https://blog.kayleh.top/springmvc-modelattribute/</guid>
      <description>@ModelAttribute？ @ModelAttribute的原理比较复杂，需要对源码有一定的理解。它可以使被
@ModelAttribute修饰的方法在控制器的处理方法之前调用。 但如果@ModelAttribute标注在方法的入参前，它可以从隐含对象中获取隐含的模型数据中获取对象，再将请求参数绑定到对象中，再传入入参。
 实际场景： Spring在进行数据库update全字段更新操作提交表单的时候，从页面获取的数据会封装成一个new的pojo对象，没有带的值为null；所以我们只能更新我们提交的数据。ModelAttribute暂时保存表单pojo对象，覆盖数据库保存的pojo对象的数据即可。
ModelAttribute提前与目标方法运行 /** * @author Kayleh */ @Controller public class ModelAttributeTest { @RequestMapping(&amp;#34;/update&amp;#34;) public String update(){ System.out.println(&amp;#34;页面update的bean对象：&amp;#34;+bean); } @ModelAttribute public void modelAttribute(){ System.out.println(&amp;#34;ModelAttribute调用了...&amp;#34;); } ===========输出========= ModelAttribute调用了... 页面update的bean对象：bean{......} 可以得出：ModelAttribute标注的方法总会在目标方法(update)前执行。 ModelAttribute可以取出隐含对象的值 @ModelAttribute public void TestModelAttribute(Map&amp;lt;String, Object&amp;gt; map){ POJO pojo = new POJO(&amp;#34;kayleh&amp;#34;, 1104); map.put(&amp;#34;value&amp;#34;,pojo); System.out.println(&amp;#34;modelAttribute方法...); } @RequestMapping(&amp;#34;/updateBook&amp;#34;) public String updateBook(@RequestParam(value=&amp;#34;author&amp;#34;)String author, Map&amp;lt;String, Object&amp;gt; model, HttpServletRequest request, @ModelAttribute(&amp;#34;value&amp;#34;)POJO pojo ){ System.out.println(pojo); return &amp;#34;ok&amp;#34;; } @ModelAttribute(&amp;ldquo;value&amp;rdquo;)这里如果指定的&amp;quot;value&amp;quot;,value就是从map取出参数的key.如果是@ModelAttribute,没有指定key,SpringMVC会默认使用返回值类型的首字母小写作为key.如pOJO.</description>
    </item>
    
    <item>
      <title>SpringMVC环境搭建</title>
      <link>https://blog.kayleh.top/springmvc%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sun, 14 Jul 2019 13:30:23 +0800</pubDate>
      
      <guid>https://blog.kayleh.top/springmvc%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>&lt;h2 id=&#34;springmvc&#34;&gt;SpringMVC&lt;/h2&gt;</description>
    </item>
    
  </channel>
</rss>
